
dist: bionic
language: generic
services: docker

env:
  global:
    CACHE_IMAGE: danteev/texlive
    GIT_BRANCH: DD

cache:
 directories:
     - /var/lib/docker
     - "$HOME/MolaeiRahnemoonSaloma"
     - "$HOME/build"

notifications:
  slack:
    secure: blcsCQhMgP/QpsYjkBQU0HeZsu0MCHjzEq8gTg1Hd38cK/qaRxT46q00MeXwypRSFaTCoUll10LCF81qlz50Q7deEW/v/F2oz1VnPRZi4+EPVkRprE3H2FDQokWiz2g45he8I90d6y6gBLtFxedDWR4vtKG1hGh+pKTBbLFe8TFtOJ6g3wPCMjwpFv8+yxTucPAv9qETcP82cjrQtR7v8oOge+HiKAQcdt2GAIY0N9MZqChcbQVoJxHTXpAIHOsarZwbtMdwl8Lmj0WrL9Ck7L4VnAKvQha/miMPksccZt4G1E3r7d34SxiYiPbuhKqnRZk/nQ5Cfmc1rw3xtCjL0fKWwl3UVtLo/dkfV5PUkIk9pGXCpnKPLyq/5ai4tVQvPdrieRg9VU5qMfdMAUQ4h3gAx5rNK4z+H0tg4QVSpCtqIzeVtyu2Qt/HohY2eUgxmu0kiMDOBGb54D7XnnUsZn3b8Y4+RX1qz564I98208q1MD33VrO5mdHnEG+VeKxRNJwUw3JYKOA+ZEnqrZ4PBi3cV0MlmRlyktO6By6iZ4s/mW/4AOUZJZVoD/l2Q+VoJIWKTiJ1fGGk0DZMtcCeyEBM+typcf4EhNOOoEalhZn4pT3B9tECDcGp/SsRKxnkE2AdtEflLabS7Bt5S6CHffmZgviVtw6xZHb8ClloHMo=
    on_success: always # default: change
    on_failure: always # default: alway
    template:
      - "Repo `%{repository_slug}` *%{result}* build (<%{build_url}|#%{build_number}>) for commit (<%{compare_url}|%{commit}>) on branch `%{branch}` by `%{author}`."
      - "Execution time: *%{duration}*"
      - "Message: %{message}"
  email:
    on_success: never # default: change
    on_failure: always # default: alway

jobs:
    include:
        - stage: "Prepare for the build"
          name: "Clone the Repo by master branch or pull it"
          script:
              - if [ -e ~/MolaeiRahnemoonSaloma ]; then rm -rf ~/MolaeiRahnemoonSaloma; git clone https://${GH_TOKEN}@${GH_REF}  ~/MolaeiRahnemoonSaloma ; else git clone https://${GH_TOKEN}@${GH_REF}  ~/MolaeiRahnemoonSaloma; fi

        - stage: "Build the PDF"
          name: "Get docker and build the PDF"
          script:
              - cd ${GIT_BRANCH}
              - docker run --rm -it -v $(pwd):/home $CACHE_IMAGE:latest latexmk --shell-escape --pdf ${GIT_BRANCH}.tex

        - stage: "Move PDF file to proper directory of Repo"
          name: "Remove the PDf from Master branch of repo and Copy the PDF into the Master branch of Repo"
          script:
              - find ~/MolaeiRahnemoonSaloma/${GIT_BRANCH} -type f -name "${GIT_BRANCH}-*.pdf" -exec rm -rf {} \;
              - cp ~/build/karim-zakaria/MolaeiRahnemoonSaloma/${GIT_BRANCH}/${GIT_BRANCH}.pdf ~/MolaeiRahnemoonSaloma/${GIT_BRANCH}/${GIT_BRANCH}-${TRAVIS_COMMIT}.pdf

        - stage: "Commit the file to the Github"
          name: "Commit to the Master branch of the Repo"
          script:
              - cd ~/MolaeiRahnemoonSaloma
              - git config credential.helper 'cache --timeout=120'
              - git config user.email "iambot@hoho.com"
              - git config user.name "Deployment Bot"
              - git add ${GIT_BRANCH} DeliveryFolder
              - git commit -m "New pre-release for commit of ${TRAVIS_COMMIT}[ci skip]"
              - git push -q https://${GH_TOKEN}@${GH_REF} master

        - if: tag IS present
          stage: "Commit the version file to the Github"
          name: "Commit to the Master branch of the Repo"
          script:
              - cd ~/MolaeiRahnemoonSaloma
              # - find ~/MolaeiRahnemoonSaloma/${GIT_BRANCH} -type f -name "${GIT_BRANCH}_*.pdf" -exec rm -rf {} \;
              - cp ~/MolaeiRahnemoonSaloma/${GIT_BRANCH}/${GIT_BRANCH}-*.pdf ~/MolaeiRahnemoonSaloma/DeliveryFolder/${GIT_BRANCH}_${TRAVIS_TAG}.pdf
              - cp ~/MolaeiRahnemoonSaloma/${GIT_BRANCH}/${GIT_BRANCH}-*.pdf ~/build/karim-zakaria/MolaeiRahnemoonSaloma/${GIT_BRANCH}/${GIT_BRANCH}_${TRAVIS_TAG}.pdf
              - git config credential.helper 'cache --timeout=120'
              - git config user.email "iambot@hoho.com"
              - git config user.name "Deployment Bot"
              - cd ~/MolaeiRahnemoonSaloma
              - git add DeliveryFolder
              - git commit -m "${TRAVIS_TAG} version of ${GIT_BRANCH} is ready"
              - git push -q https://${GH_TOKEN}@${GH_REF} master
